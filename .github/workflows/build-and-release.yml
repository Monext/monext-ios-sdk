name: Build and Release

on:
  push:
    branches: [ master, main ]

jobs:
  build:
    runs-on: macos-14
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should-release: ${{ steps.check-release.outputs.should-release }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Xcode 16.2
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Download iOS and iOS Simulator Platforms
      run: |
        set -e
        echo "⬇️ Downloading iOS Platform..."
        xcodebuild -downloadPlatform iOS
        echo "⬇️ Downloading iOS Simulator Platform..."
        xcodebuild -downloadPlatform "iOS Simulator"
        echo "📱 SDKs after download:"
        xcodebuild -showsdks
        echo "🔎 Runtimes:"
        xcrun simctl list runtimes
        echo "✅ Verifying SDK paths..."
        xcrun --sdk iphoneos --show-sdk-path
        xcrun --sdk iphonesimulator --show-sdk-path

    - name: Get version from plist
      id: get-version
      run: |
        VERSION=$(plutil -extract CFBundleShortVersionString raw Sources/Monext/AppMetadata.plist)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Version détectée: $VERSION"

    - name: Check if release should be created
      id: check-release
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        
        # Vérifier si on est sur master/main
        if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Vérifier si le tag existe déjà
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "🏷️ Tag v$VERSION existe déjà, pas de release"
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✨ Nouvelle version détectée: v$VERSION"
          fi
        else
          # Pas sur master/main (PR ou autre branche)
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "🔧 Branche: ${{ github.ref_name }}, pas de release"
        fi

    - name: Configure API Key
      env:
        NETCETERA_API_KEY: ${{ secrets.NETCETERA_API_KEY }}
      run: |
        if [ -z "$NETCETERA_API_KEY" ]; then
          echo "⚠️ NETCETERA_API_KEY secret non configuré"
          exit 1
        fi
        sed -i '' "s/\${NETCETERA_API_KEY}/$NETCETERA_API_KEY/g" Sources/Monext/AppMetadata.plist
        echo "🔑 Clé API configurée"

    - name: Clean build folders
      run: |
        rm -rf .build build dist Package.resolved .swiftpm/xcode

    - name: Resolve SPM dependencies
      run: |
        swift package resolve
        swift package show-dependencies

    - name: Build XCFramework
      run: |
        chmod +x build_xcframework.sh
        bash -x build_xcframework.sh

    - name: Prepare release bundle
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        zip -r "Monext-${VERSION}.zip" dist/Monext.xcframework -x "*.DS_Store*"
        ls -l dist || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: monext-build-${{ steps.get-version.outputs.version }}-${{ github.run_number }}
        path: |
          dist/Monext.xcframework
          Monext-${{ steps.get-version.outputs.version }}.zip
        retention-days: 90

  release:
    needs: build
    runs-on: macos-latest
    if: needs.build.outputs.should-release == 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: monext-build-${{ needs.build.outputs.version }}-${{ github.run_number }}

    - name: Generate Release Notes
      id: release-notes
      run: |
        set -e
        VERSION="${{ needs.build.outputs.version }}"
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)")
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -10)
        fi
        cat > release-notes.md << EOF
        ## 🚀 Monext v$VERSION

        ### 📋 Changements
        $COMMITS
        
        ### 🔧 Installation
        Monext iOS SDK is available via [Swift Package Manager](https://www.swift.org/documentation/package-manager/).
        
        ### Swift Package Manager
        
        1. **Add the Package Dependency:**  
           Follow Apple's guide on [Adding Package Dependencies to Your App](https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app).
        
        2. **Enter the Repository URL:**
           \`\`\`
           https://github.com/Monext/monext-ios-sdk
           \`\`\`  
        
        3. **Specify the Version:**  
           Use version \`$VERSION\` or later.

        ### 📦 Contenu de la release
        - Monext.xcframework
        - Archive zip

        ---
        **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Commit:** \`${{ github.sha }}\`
        EOF

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: 🚀 Monext v${{ needs.build.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          Monext-${{ needs.build.outputs.version }}.zip
          dist/Monext.xcframework
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Build Status
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.URL_WEBHOOK_TEAMS }}
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          BUILD_RESULT="${{ needs.build.result }}"
          RELEASE_RESULT="${{ needs.release.result }}"
          BRANCH="${{ github.ref_name }}"
          SHOULD_RELEASE="${{ needs.build.outputs.should-release }}"
          
          # Déterminer le statut global
          if [[ "$BUILD_RESULT" == "failure" ]]; then
            OVERALL_STATUS="failure"
            NOTIFICATION_TYPE="Build"
          elif [[ "$RELEASE_RESULT" == "failure" ]]; then
            OVERALL_STATUS="failure"
            NOTIFICATION_TYPE="Release"
          elif [[ "$RELEASE_RESULT" == "success" ]]; then
            OVERALL_STATUS="success"
            NOTIFICATION_TYPE="Release"
          elif [[ "$BUILD_RESULT" == "success" ]] && [[ "$SHOULD_RELEASE" == "false" ]]; then
            OVERALL_STATUS="success"
            NOTIFICATION_TYPE="Build (sans release)"
          else
            OVERALL_STATUS="unknown"
            NOTIFICATION_TYPE="Build"
          fi
          
          # Configuration selon le statut
          if [[ "$OVERALL_STATUS" == "success" ]]; then
            ICON_COLOR="Good"
            ICON="CheckmarkStarburst"
            STATUS_TEXT="✅ Success"
            
            if [[ "$RELEASE_RESULT" == "success" ]]; then
              EXTRA_MESSAGE="Publication sur Github Releases réussie."
              RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
              RELEASE_ACTION="{
                \"type\": \"Action.OpenUrl\",
                \"title\": \"🚀 Voir la release\",
                \"url\": \"${RELEASE_URL}\"
              },"
              echo "✅ Release v${VERSION} créée avec succès!"
              echo "🔗 ${RELEASE_URL}"
            else
              EXTRA_MESSAGE="Build réussi sur la branche ${BRANCH} (pas de release créée)."
              RELEASE_ACTION=""
              echo "✅ Build v${VERSION} réussi sur ${BRANCH} (should-release: ${SHOULD_RELEASE})"
            fi
          elif [[ "$OVERALL_STATUS" == "failure" ]]; then
            ICON_COLOR="Attention"
            ICON="DismissCircle"
            STATUS_TEXT="❌ Échec"
            EXTRA_MESSAGE="Échec lors du processus de ${NOTIFICATION_TYPE}."
            RELEASE_ACTION=""
            
            echo "❌ Échec du ${NOTIFICATION_TYPE}"
          else
            ICON_COLOR="Warning"
            ICON="Warning"
            STATUS_TEXT="⚠️ Statut inconnu"
            EXTRA_MESSAGE="Le statut du workflow est indéterminé."
            RELEASE_ACTION=""
            
            echo "⚠️ Statut inconnu"
          fi
          
          # Envoi de la notification Teams
          curl -X POST "${TEAMS_WEBHOOK_URL}" \
            -H "Content-Type: application/json" \
            -d @- << EOF
          {
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "contentUrl": null,
                "content": {
                  "type": "AdaptiveCard",
                  "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "version": "1.4",
                  "body": [
                    {
                      "type": "ColumnSet",
                      "columns": [
                        {
                          "type": "Column",
                          "width": "auto",
                          "height": "stretch",
                          "items": [
                            {
                              "type": "Icon",
                              "name": "${ICON}",
                              "style": "Filled",
                              "color": "${ICON_COLOR}"
                            }
                          ],
                          "spacing": "None"
                        },
                        {
                          "type": "Column",
                          "width": "stretch",
                          "items": [
                            {
                              "type": "TextBlock",
                              "text": "Publication **SDK iOS** - ${STATUS_TEXT}",
                              "wrap": true,
                              "size": "Large",
                              "weight": "Bolder"
                            }
                          ],
                          "spacing": "Small"
                        }
                      ],
                      "spacing": "None"
                    },
                    {
                      "type": "TextBlock",
                      "text": "_version ${VERSION}_",
                      "wrap": true,
                      "isSubtle": true,
                      "spacing": "Small"
                    },
                    {
                      "type": "FactSet",
                      "facts": [
                        {
                          "title": "Repository:",
                          "value": "${{ github.repository }}"
                        },
                        {
                          "title": "Branch/Tag:",
                          "value": "${BRANCH}"
                        },
                        {
                          "title": "Auteur:",
                          "value": "${{ github.actor }}"
                        },
                        {
                          "title": "Build Status:",
                          "value": "${BUILD_RESULT}"
                        },
                        {
                          "title": "Release Status:",
                          "value": "${RELEASE_RESULT}"
                        }
                      ],
                      "separator": true
                    },
                    {
                      "type": "TextBlock",
                      "text": "${EXTRA_MESSAGE}",
                      "wrap": true,
                      "separator": true
                    }
                  ],
                  "actions": [
                    ${RELEASE_ACTION}
                    {
                      "type": "Action.OpenUrl",
                      "title": "📊 Voir le build",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          
          echo "✅ Notification ${NOTIFICATION_TYPE} (${OVERALL_STATUS}) envoyée avec succès"
          
          # Faire échouer le step si le statut global est en échec
          if [[ "$OVERALL_STATUS" == "failure" ]]; then
            exit 1
          fi
